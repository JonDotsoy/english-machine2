---
import type { Question, QuestionsDB } from "@/components/dto/question";
import MultiChoiceLayout from "@/layouts/MultiChoiceLayout.astro";
import { arrayFromAsync } from "@/lib/arrayFromAsync";
import { filterQuestionsDB } from "@/utils/filterQuestionsDB";
import type { GetStaticPaths } from "astro";

export const prerender = true;

interface Props {
  slug: string;
  questionsDB: QuestionsDB;
}

export const getStaticPaths: GetStaticPaths = async () => {
  const f = filterQuestionsDB(
    await arrayFromAsync(
      Object.values(await import.meta.glob("../../dbs/*.json")),
      async (e) => ((await e()) as any).default as QuestionsDB,
    ),
    true, // Show private questions
  );

  return f.map((questionsDB) => ({
    params: { slug: questionsDB.slug },
    props: {
      slug: questionsDB.slug,
      questionsDB: questionsDB as QuestionsDB,
    },
  }));
};

const { slug, questionsDB }: Props = Astro.props;
---

<MultiChoiceLayout
  id={slug}
  title={questionsDB.title!}
  db={questionsDB.questions}
>
  <Fragment slot={"head"}>
    <meta
      name="description"
      content={questionsDB.description ?? questionsDB.title}
    />
    <meta property="og:title" content={questionsDB.title} />
    <meta
      property="og:description"
      content={questionsDB.description ?? questionsDB.title}
    />
    <meta property="og:type" content="article" />
    <meta
      property="og:image"
      content={`${import.meta.env.BASE_URL}favicon.svg`}
    />
    <meta name="twitter:card" content="summary" />
    <meta name="twitter:title" content={questionsDB.title} />
    <meta
      name="twitter:description"
      content={questionsDB.description ?? questionsDB.title}
    />
    <meta
      name="twitter:image"
      content={`${import.meta.env.BASE_URL}favicon.svg`}
    />
  </Fragment>
</MultiChoiceLayout>
